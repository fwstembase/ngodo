'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Menu, X, Search, Package, MessageSquare, Heart, User, Home, LogOut, Camera, MapPin, DollarSign, Send, Trash2, Edit, MoreVertical } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { toast } from 'sonner';
import { Toaster } from '@/components/ui/sonner';

export default function PinjamAja() {
  const [currentPage, setCurrentPage] = useState('landing');
  const [previousPage, setPreviousPage] = useState('beranda');
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [user, setUser] = useState(null);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [authMode, setAuthMode] = useState('login');
  const [items, setItems] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedItem, setSelectedItem] = useState(null);
  const [wishlist, setWishlist] = useState([]);
  const [chats, setChats] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [showFeatureModal, setShowFeatureModal] = useState(false);
  const [featureModalContent, setFeatureModalContent] = useState({});
  const [showEditProfile, setShowEditProfile] = useState(false);
  const [showEditPassword, setShowEditPassword] = useState(false);
  const [showAddItemForm, setShowAddItemForm] = useState(false);
  const [showEditItemForm, setShowEditItemForm] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [openMenuItemId, setOpenMenuItemId] = useState(null);

  // Form states
  const [authForm, setAuthForm] = useState({
    email: '',
    username: '',
    password: '',
    confirmPassword: ''
  });

  const [itemForm, setItemForm] = useState({
    title: '',
    description: '',
    price: '',
    priceUnit: 'hari',
    location: '',
    image: ''
  });

  const [chatMessage, setChatMessage] = useState('');
  const [profileForm, setProfileForm] = useState({ username: '' });
  const [passwordForm, setPasswordForm] = useState({ currentPassword: '', newPassword: '', confirmPassword: '' });

  // Load data from localStorage on mount
  useEffect(() => {
    const storedUser = localStorage.getItem('currentUser');
    if (storedUser) {
      const userData = JSON.parse(storedUser);
      setUser(userData);
      setCurrentPage('beranda');
      setProfileForm({ username: userData.username });
    }

    const storedItems = localStorage.getItem('items');
    if (storedItems) {
      setItems(JSON.parse(storedItems));
    } else {
      // Initialize with demo items
      const demoItems = [
        {
          id: '1',
          title: 'Kamera DSLR Canon EOS 80D',
          description: 'Kamera DSLR profesional dalam kondisi sangat baik, lengkap dengan lensa 18-55mm',
          price: 150000,
          priceUnit: 'hari',
          location: 'Jakarta Selatan',
          image: 'https://images.unsplash.com/photo-1606980875396-c78bf46e4e43?w=400',
          ownerId: 'demo-user',
          ownerName: 'Sari Indah',
          status: 'tersedia',
          createdAt: new Date().toISOString()
        },
        {
          id: '2',
          title: 'Tenda Camping 4 Orang',
          description: 'Tenda camping untuk 4 orang, tahan air dan mudah dipasang',
          price: 100000,
          priceUnit: 'hari',
          location: 'Bandung',
          image: 'https://images.unsplash.com/photo-1504280390367-361c6d9f38f4?w=400',
          ownerId: 'demo-user-2',
          ownerName: 'Ahmad Rizki',
          status: 'tersedia',
          createdAt: new Date().toISOString()
        },
        {
          id: '3',
          title: 'Proyektor Epson EB-X41',
          description: 'Proyektor untuk presentasi atau nonton film, resolusi tinggi',
          price: 200000,
          priceUnit: 'hari',
          location: 'Jakarta Pusat',
          image: 'https://images.unsplash.com/photo-1517487881594-2787fef5ebf7?w=400',
          ownerId: 'demo-user-3',
          ownerName: 'Budi Santoso',
          status: 'tersedia',
          createdAt: new Date().toISOString()
        },
        {
          id: '4',
          title: 'Sepeda Gunung Polygon',
          description: 'Sepeda gunung 27.5 inch, kondisi prima, cocok untuk trail',
          price: 75000,
          priceUnit: 'hari',
          location: 'Bogor',
          image: 'https://images.unsplash.com/photo-1576435728678-68d0fbf94e91?w=400',
          ownerId: 'demo-user-4',
          ownerName: 'Dimas Pratama',
          status: 'tersedia',
          createdAt: new Date().toISOString()
        },
        {
          id: '5',
          title: 'Mesin Bor Listrik Bosch',
          description: 'Bor listrik profesional untuk renovasi dan pertukangan',
          price: 50000,
          priceUnit: 'hari',
          location: 'Tangerang',
          image: 'https://images.unsplash.com/photo-1504148455328-c376907d081c?w=400',
          ownerId: 'demo-user-5',
          ownerName: 'Eko Prasetyo',
          status: 'tersedia',
          createdAt: new Date().toISOString()
        },
        {
          id: '6',
          title: 'PlayStation 5',
          description: 'PS5 lengkap dengan 2 controller dan beberapa game',
          price: 250000,
          priceUnit: 'hari',
          location: 'Jakarta Barat',
          image: 'https://images.unsplash.com/photo-1606144042614-b2417e99c4e3?w=400',
          ownerId: 'demo-user-6',
          ownerName: 'Rudi Gaming',
          status: 'tersedia',
          createdAt: new Date().toISOString()
        }
      ];
      localStorage.setItem('items', JSON.stringify(demoItems));
      setItems(demoItems);
    }

    const storedWishlist = localStorage.getItem('wishlist');
    if (storedWishlist) {
      setWishlist(JSON.parse(storedWishlist));
    }

    const storedChats = localStorage.getItem('chats');
    if (storedChats) {
      setChats(JSON.parse(storedChats));
    }
  }, []);

  // Auth handlers
  const handleAuth = async (e) => {
    e.preventDefault();
    
    if (authMode === 'register') {
      if (!authForm.email || !authForm.username || !authForm.password || !authForm.confirmPassword) {
        toast.error('Semua field harus diisi');
        return;
      }
      if (authForm.password !== authForm.confirmPassword) {
        toast.error('Password dan konfirmasi password tidak cocok');
        return;
      }

      const users = JSON.parse(localStorage.getItem('users') || '[]');
      const userExists = users.find(u => u.email === authForm.email);
      if (userExists) {
        toast.error('Email sudah terdaftar');
        return;
      }

      const newUser = {
        id: Date.now().toString(),
        email: authForm.email,
        username: authForm.username,
        password: authForm.password,
        createdAt: new Date().toISOString()
      };

      users.push(newUser);
      localStorage.setItem('users', JSON.stringify(users));
      
      const currentUser = {
        id: newUser.id,
        email: newUser.email,
        username: newUser.username
      };
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
      setUser(currentUser);
      setProfileForm({ username: currentUser.username });
      setShowAuthModal(false);
      setCurrentPage('beranda');
      toast.success('Registrasi berhasil!');
    } else {
      if (!authForm.email || !authForm.password) {
        toast.error('Email dan password harus diisi');
        return;
      }

      const users = JSON.parse(localStorage.getItem('users') || '[]');
      const existingUser = users.find(u => u.email === authForm.email && u.password === authForm.password);
      
      if (existingUser) {
        const currentUser = {
          id: existingUser.id,
          email: existingUser.email,
          username: existingUser.username
        };
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        setUser(currentUser);
        setProfileForm({ username: currentUser.username });
        setShowAuthModal(false);
        setCurrentPage('beranda');
        toast.success('Login berhasil!');
      } else {
        toast.error('Email atau password salah');
      }
    }

    setAuthForm({ email: '', username: '', password: '', confirmPassword: '' });
  };

  const handleLogout = () => {
    localStorage.removeItem('currentUser');
    setUser(null);
    setCurrentPage('landing');
    toast.success('Berhasil logout');
  };

  // Item handlers
  const handleAddItem = (e) => {
    e.preventDefault();
    
    if (!itemForm.title || !itemForm.description || !itemForm.price || !itemForm.location) {
      toast.error('Semua field harus diisi');
      return;
    }

    const newItem = {
      id: Date.now().toString(),
      ...itemForm,
      price: parseFloat(itemForm.price),
      ownerId: user.id,
      ownerName: user.username,
      status: 'tersedia',  // default status
      createdAt: new Date().toISOString()
    };

    const updatedItems = [...items, newItem];
    setItems(updatedItems);
    localStorage.setItem('items', JSON.stringify(updatedItems));
    
    // Show success toast
    toast.success('Barang berhasil ditambahkan!');
    
    // Reset form
    setItemForm({
      title: '',
      description: '',
      price: '',
      priceUnit: 'hari',
      location: '',
      image: ''
    });
    
    // Hide the add item form
    setShowAddItemForm(false);
    
    // Redirect to item detail page
    setSelectedItem(newItem);
    setCurrentPage('item-detail');
  };

  const handleCancelAddItem = () => {
    // Clear form
    setItemForm({
      title: '',
      description: '',
      price: '',
      priceUnit: 'hari',
      location: '',
      image: ''
    });
    
    // Hide the add item form
    setShowAddItemForm(false);
  };

  // Helper function to navigate with history tracking
  const navigateTo = (page) => {
    setPreviousPage(currentPage);
    setCurrentPage(page);
  };

  const getUserItems = () => {
    if (!user) return [];
    return items.filter(item => item.ownerId === user.id);
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setItemForm({ ...itemForm, image: reader.result });
      };
      reader.readAsDataURL(file);
    }
  };

  // Search handler
  const handleSearch = () => {
    setCurrentPage('cari-barang');
  };

  const getFilteredItems = () => {
    if (!searchQuery) return items;
    return items.filter(item => 
      item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      item.description.toLowerCase().includes(searchQuery.toLowerCase())
    );
  };

  // Wishlist handlers
  const handleAddToWishlist = (itemId) => {
    if (!user) {
      toast.error('Silakan login terlebih dahulu');
      return;
    }

    const exists = wishlist.find(w => w.userId === user.id && w.itemId === itemId);
    if (exists) {
      toast.warning('Barang sudah ada di wishlist');
      return;
    }

    const newWishlist = [...wishlist, {
      userId: user.id,
      itemId: itemId,
      addedAt: new Date().toISOString()
    }];
    setWishlist(newWishlist);
    localStorage.setItem('wishlist', JSON.stringify(newWishlist));
    toast.success('Berhasil ditambahkan ke wishlist');
  };

  const handleRemoveFromWishlist = (itemId) => {
    const newWishlist = wishlist.filter(w => !(w.userId === user.id && w.itemId === itemId));
    setWishlist(newWishlist);
    localStorage.setItem('wishlist', JSON.stringify(newWishlist));
    
    // Only show toast if we're on wishlist page (not item detail)
    if (currentPage === 'wishlist') {
      toast.success('Berhasil dihapus dari wishlist');
    }
  };

  const getUserWishlistItems = () => {
    if (!user) return [];
    const userWishlistIds = wishlist.filter(w => w.userId === user.id).map(w => w.itemId);
    return items.filter(item => userWishlistIds.includes(item.id));
  };

  // Chat handlers
  const handleStartChat = (item) => {
    if (!user) {
      toast.error('Silakan login terlebih dahulu');
      return;
    }

    if (item.ownerId === user.id) {
      toast.warning('Anda tidak bisa chat dengan diri sendiri');
      return;
    }

    const existingChat = chats.find(c => 
      (c.participants.includes(user.id) && c.participants.includes(item.ownerId)) ||
      (c.itemId === item.id && c.participants.includes(user.id))
    );

    if (existingChat) {
      setSelectedChat(existingChat);
      setCurrentPage('chat');
      return;
    }

    const newChat = {
      id: Date.now().toString(),
      participants: [user.id, item.ownerId],
      participantNames: { [user.id]: user.username, [item.ownerId]: item.ownerName },
      itemId: item.id,
      itemTitle: item.title,
      messages: [],
      lastMessage: '',
      lastUpdated: new Date().toISOString()
    };

    const updatedChats = [...chats, newChat];
    setChats(updatedChats);
    localStorage.setItem('chats', JSON.stringify(updatedChats));
    setSelectedChat(newChat);
    setCurrentPage('chat');
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    
    if (!chatMessage.trim() || !selectedChat) return;

    const newMessage = {
      id: Date.now().toString(),
      senderId: user.id,
      senderName: user.username,
      text: chatMessage,
      timestamp: new Date().toISOString()
    };

    const updatedChat = {
      ...selectedChat,
      messages: [...selectedChat.messages, newMessage],
      lastMessage: chatMessage,
      lastUpdated: new Date().toISOString()
    };

    const updatedChats = chats.map(c => c.id === selectedChat.id ? updatedChat : c);
    setChats(updatedChats);
    localStorage.setItem('chats', JSON.stringify(updatedChats));
    setSelectedChat(updatedChat);
    setChatMessage('');
  };

  const getUserChats = () => {
    if (!user) return [];
    return chats.filter(c => c.participants.includes(user.id))
      .sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated));
  };

  // Profile handlers
  const handleUpdateProfile = (e) => {
    e.preventDefault();
    if (!profileForm.username.trim()) {
      toast.error('Username tidak boleh kosong');
      return;
    }

    const updatedUser = { ...user, username: profileForm.username };
    localStorage.setItem('currentUser', JSON.stringify(updatedUser));
    
    const users = JSON.parse(localStorage.getItem('users') || '[]');
    const updatedUsers = users.map(u => u.id === user.id ? { ...u, username: profileForm.username } : u);
    localStorage.setItem('users', JSON.stringify(updatedUsers));
    
    setUser(updatedUser);
    setShowEditProfile(false);
    toast.success('Profil berhasil diupdate');
  };

  const handleUpdatePassword = (e) => {
    e.preventDefault();
    
    if (!passwordForm.currentPassword || !passwordForm.newPassword || !passwordForm.confirmPassword) {
      toast.error('Semua field harus diisi');
      return;
    }

    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast.error('Password baru dan konfirmasi tidak cocok');
      return;
    }

    const users = JSON.parse(localStorage.getItem('users') || '[]');
    const currentUserData = users.find(u => u.id === user.id);
    
    if (currentUserData && currentUserData.password !== passwordForm.currentPassword) {
      toast.error('Password lama salah');
      return;
    }

    const updatedUsers = users.map(u => 
      u.id === user.id ? { ...u, password: passwordForm.newPassword } : u
    );
    localStorage.setItem('users', JSON.stringify(updatedUsers));
    
    setPasswordForm({ currentPassword: '', newPassword: '', confirmPassword: '' });
    setShowEditPassword(false);
    toast.success('Password berhasil diubah');
  };

  // Feature modal handler
  const showFeature = (title, description) => {
    setFeatureModalContent({ title, description });
    setShowFeatureModal(true);
  };

  const getUserItemCount = () => {
    if (!user) return 0;
    return items.filter(item => item.ownerId === user.id).length;
  };

  // Navigation
  const navItems = [
    { id: 'beranda', label: 'Beranda', icon: Home },
    { id: 'cari-barang', label: 'Cari', icon: Search },
    { id: 'sewakan-barang', label: 'Sewakan', icon: Package },
    { id: 'chat', label: 'Chat', icon: MessageSquare },
    { id: 'wishlist', label: 'Wishlist', icon: Heart },
    { id: 'profil', label: 'Profil', icon: User }
  ];

  const renderNavbar = () => {
    if (currentPage === 'landing') {
      return (
        <nav className="bg-white shadow-sm sticky top-0 z-50">
          <div className="container mx-auto px-4">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center space-x-3">
                <img src="/logo.png" alt="PinjamAja Logo" className="h-9 w-9" />
                <div className="text-2xl font-bold" style={{ color: '#245EDE' }}>PinjamAja</div>
              </div>
              <Button onClick={() => setShowAuthModal(true)} style={{ backgroundColor: '#245EDE' }} className="text-white">
                Masuk
              </Button>
            </div>
          </div>
        </nav>
      );
    }

    return (
      <nav className="bg-white shadow-sm sticky top-0 z-50">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-3">
              <img src="/logo.png" alt="PinjamAja Logo" className="h-9 w-9" />
              <div className="text-2xl font-bold" style={{ color: '#245EDE' }}>PinjamAja</div>
            </div>
            
            {/* Desktop Navigation */}
            <div className="hidden xl:flex items-center space-x-6">
              {navItems.map(item => {
                const Icon = item.icon;
                return (
                  <button
                    key={item.id}
                    onClick={() => setCurrentPage(item.id)}
                    className={`flex items-center space-x-2 hover:opacity-80 transition ${currentPage === item.id ? 'font-semibold' : ''}`}
                    style={{ color: currentPage === item.id ? '#245EDE' : '#666' }}
                  >
                    <Icon size={20} />
                    <span>{item.label}</span>
                  </button>
                );
              })}
            </div>

            {/* Mobile & Tablet Menu Button */}
            <button
              className="xl:hidden"
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              style={{ color: '#245EDE' }}
            >
              {isMobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
            </button>
          </div>

          {/* Mobile & Tablet Navigation */}
          {isMobileMenuOpen && (
            <div className="xl:hidden py-4 border-t">
              {navItems.map(item => {
                const Icon = item.icon;
                return (
                  <button
                    key={item.id}
                    onClick={() => {
                      setCurrentPage(item.id);
                      setIsMobileMenuOpen(false);
                    }}
                    className={`flex items-center space-x-3 w-full py-3 px-4 hover:bg-gray-50 transition ${currentPage === item.id ? 'font-semibold' : ''}`}
                    style={{ color: currentPage === item.id ? '#245EDE' : '#666' }}
                  >
                    <Icon size={20} />
                    <span>{item.label}</span>
                  </button>
                );
              })}
            </div>
          )}
        </div>
      </nav>
    );
  };

  const renderLandingPage = () => (
    <div className="min-h-screen bg-white">
      {/* Hero Section */}
      <section className="py-20" style={{ background: 'linear-gradient(135deg, #245EDE 0%, #1a4ab8 100%)' }}>
        <div className="container mx-auto px-4 text-center text-white">
          <h1 className="text-5xl md:text-6xl font-bold mb-4">PinjamAja</h1>
          <h2 className="text-3xl md:text-4xl font-semibold mb-6">Pinjam & Sewakan Barang<br/>dengan Mudah</h2>
          <p className="text-xl mb-8 max-w-2xl mx-auto">Platform terpercaya untuk berbagi barang dalam komunitas. Hemat uang, kurangi limbah, dan bangun koneksi dengan tetangga Anda.</p>
          <Button onClick={() => setShowAuthModal(true)} size="lg" className="bg-white hover:bg-gray-100" style={{ color: '#245EDE' }}>
            Mulai Sekarang
          </Button>
          <p className="mt-4 text-sm">Gratis untuk semua pengguna</p>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
            <div>
              <div className="text-5xl font-bold mb-2" style={{ color: '#245EDE' }}>1000+</div>
              <div className="text-gray-600 text-lg">Barang Tersedia</div>
            </div>
            <div>
              <div className="text-5xl font-bold mb-2" style={{ color: '#245EDE' }}>500+</div>
              <div className="text-gray-600 text-lg">Pengguna Aktif</div>
            </div>
            <div>
              <div className="text-5xl font-bold mb-2" style={{ color: '#245EDE' }}>2000+</div>
              <div className="text-gray-600 text-lg">Transaksi Berhasil</div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-4">Mengapa Pilih PinjamAja?</h2>
          <p className="text-center text-gray-600 mb-12 max-w-3xl mx-auto">Platform yang dirancang khusus untuk kemudahan pinjam-meminjam barang dengan fitur-fitur canggih dan keamanan terjamin.</p>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {[
              { title: 'Berbagai Kategori Barang', desc: 'Temukan berbagai jenis barang mulai dari elektronik, kendaraan, peralatan, hingga perlengkapan olahraga.' },
              { title: 'Chat Langsung', desc: 'Komunikasi langsung dengan pemilik barang untuk koordinasi yang lebih mudah dan efisien.' },
              { title: 'Sistem Booking Fleksibel', desc: 'Tentukan tanggal, waktu, dan lokasi pertemuan sesuai kesepakatan dengan pemilik barang.' },
              { title: 'Wishlist Personal', desc: 'Simpan barang favorit Anda untuk dipinjam di kemudian hari.' },
              { title: 'Platform Terpercaya', desc: 'Sistem yang aman dengan verifikasi pengguna dan review transparan.' },
              { title: 'Komunitas Saling Bantu', desc: 'Bergabung dengan komunitas yang saling membantu berbagi barang.' }
            ].map((feature, idx) => (
              <Card key={idx} className="hover:shadow-lg transition cursor-pointer">
                <CardHeader>
                  <CardTitle style={{ color: '#245EDE' }}>{feature.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-600">{feature.desc}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* How It Works */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-4">Cara Kerja PinjamAja</h2>
          <p className="text-center text-gray-600 mb-12">Prosesnya sangat mudah dan hanya butuh 4 langkah sederhana</p>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {[
              { num: '1', title: 'Daftar Akun', desc: 'Buat akun gratis dengan email dan informasi dasar Anda.' },
              { num: '2', title: 'Cari atau Sewakan Barang', desc: 'Temukan barang yang Anda butuhkan atau sewakan barang yang Anda miliki.' },
              { num: '3', title: 'Buat Janji Pertemuan', desc: 'Koordinasi dengan pemilik/peminjam untuk waktu dan lokasi pertemuan.' },
              { num: '4', title: 'Bertemu & Transaksi', desc: 'Bertemu secara langsung, lakukan transaksi, dan nikmati pengalaman pinjam-meminjam yang aman.' }
            ].map((step) => (
              <div key={step.num} className="text-center">
                <div className="w-16 h-16 rounded-full flex items-center justify-center text-3xl font-bold text-white mx-auto mb-4" style={{ backgroundColor: '#245EDE' }}>
                  {step.num}
                </div>
                <h3 className="text-xl font-semibold mb-2">{step.title}</h3>
                <p className="text-gray-600">{step.desc}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">Apa Kata Pengguna Kami</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {[
              { name: 'Budi Santoso', text: '"PinjamAja sangat membantu saat saya butuh alat bor untuk renovasi rumah. Lebih hemat daripada harus beli baru!"' },
              { name: 'Sari Indah', text: '"Sebagai pemilik kamera DSLR, saya senang bisa menyewakan alat saya saat tidak digunakan. Tambahan passive income yang bagus!"' },
              { name: 'Ahmad Rizki', text: '"Interface yang user-friendly dan sistem chat yang memudahkan koordinasi. Recommended banget untuk sharing ekonomi!"' }
            ].map((testimonial, idx) => (
              <Card key={idx} className="hover:shadow-lg transition">
                <CardContent className="pt-6">
                  <p className="text-gray-700 mb-4 italic">{testimonial.text}</p>
                  <p className="font-semibold" style={{ color: '#245EDE' }}>- {testimonial.name}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20" style={{ backgroundColor: '#245EDE' }}>
        <div className="container mx-auto px-4 text-center text-white">
          <h2 className="text-4xl font-bold mb-4">Siap Bergabung dengan Komunitas PinjamAja?</h2>
          <p className="text-xl mb-8">Mulai hemat, berbagi, dan membangun koneksi dengan tetangga Anda hari ini.</p>
          <Button onClick={() => setShowAuthModal(true)} size="lg" className="bg-white hover:bg-gray-100" style={{ color: '#245EDE' }}>
            Bergabung Sekarang - Gratis!
          </Button>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-8">
            <div>
              <h3 className="text-2xl font-bold mb-4" style={{ color: '#245EDE' }}>PinjamAja</h3>
              <p className="text-gray-400">Platform pinjam-meminjam barang terpercaya yang menghubungkan komunitas untuk berbagi dan berhemat.</p>
            </div>
            <div>
              <h4 className="font-semibold mb-4">Fitur Utama</h4>
              <ul className="space-y-2 text-gray-400">
                <li><button onClick={() => showFeature('Pinjam Barang', 'Temukan berbagai barang yang bisa Anda pinjam dari komunitas. Cukup cari barang yang Anda butuhkan, hubungi pemiliknya, dan atur jadwal pinjaman.')} className="hover:text-white">Pinjam Barang</button></li>
                <li><button onClick={() => showFeature('Sewakan Barang', 'Punya barang yang jarang dipakai? Sewakan dan dapatkan penghasilan tambahan. Upload foto, tentukan harga, dan tunggu permintaan masuk.')} className="hover:text-white">Sewakan Barang</button></li>
                <li><button onClick={() => showFeature('Chat Langsung', 'Komunikasi langsung dengan pemilik atau peminjam barang. Koordinasikan waktu, tempat, dan detail pinjaman dengan mudah melalui fitur chat kami.')} className="hover:text-white">Chat Langsung</button></li>
                <li><button onClick={() => showFeature('Wishlist', 'Simpan barang-barang yang menarik perhatian Anda ke wishlist. Akses kapan saja dan hubungi pemilik saat Anda siap untuk meminjam.')} className="hover:text-white">Wishlist</button></li>
              </ul>
            </div>
            <div>
              <h4 className="font-semibold mb-4">Bantuan</h4>
              <ul className="space-y-2 text-gray-400">
                <li><button onClick={() => showFeature('Cara Menggunakan', '1. Daftar akun gratis\n2. Cari barang yang Anda butuhkan atau upload barang untuk disewakan\n3. Chat dengan pemilik/peminjam untuk koordinasi\n4. Atur waktu dan tempat pertemuan\n5. Lakukan transaksi dengan aman')} className="hover:text-white">Cara Menggunakan</button></li>
                <li><button onClick={() => showFeature('FAQ', 'Q: Apakah PinjamAja gratis?\nA: Ya, mendaftar dan menggunakan platform kami sepenuhnya gratis.\n\nQ: Bagaimana cara pembayaran?\nA: Pembayaran dilakukan langsung antara peminjam dan pemilik barang saat bertemu.\n\nQ: Apakah ada jaminan keamanan?\nA: Kami menyarankan bertemu di tempat umum dan memeriksa identitas kedua belah pihak.')} className="hover:text-white">FAQ</button></li>
                <li><button onClick={() => showFeature('Kebijakan Privasi', 'Kami sangat menghargai privasi Anda. Data pribadi Anda disimpan dengan aman dan tidak akan dibagikan kepada pihak ketiga tanpa izin Anda. Kami hanya menggunakan informasi Anda untuk meningkatkan layanan platform.')} className="hover:text-white">Kebijakan Privasi</button></li>
                <li><button onClick={() => showFeature('Syarat & Ketentuan', '1. Pengguna harus berusia minimal 17 tahun\n2. Informasi yang diberikan harus akurat dan benar\n3. Dilarang menyewakan barang ilegal atau berbahaya\n4. Transaksi dilakukan atas tanggung jawab masing-masing pihak\n5. PinjamAja tidak bertanggung jawab atas kerugian dalam transaksi')} className="hover:text-white">Syarat & Ketentuan</button></li>
              </ul>
            </div>
          </div>
          <div className="border-t border-gray-800 pt-8 text-center text-gray-400">
            <p>© 2025 PinjamAja. Semua hak cipta dilindungi.</p>
          </div>
        </div>
      </footer>
    </div>
  );

  const renderBeranda = () => (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">Selamat Datang, {user?.username}!</h1>
          <p className="text-gray-600">Cari barang yang anda butuhkan atau sewakan barang yang tidak terpakai untuk dapatkan uang.</p>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-12">
          {[
            { id: 'cari-barang', label: 'Cari Barang', icon: Search, color: '#245EDE' },
            { id: 'sewakan-barang', label: 'Sewakan Barang', icon: Package, color: '#245EDE' },
            { id: 'chat', label: 'Chat', icon: MessageSquare, color: '#245EDE' },
            { id: 'wishlist', label: 'Wishlist', icon: Heart, color: '#245EDE' }
          ].map(action => {
            const Icon = action.icon;
            return (
              <Card key={action.id} className="cursor-pointer hover:shadow-lg transition" onClick={() => setCurrentPage(action.id)}>
                <CardContent className="flex flex-col items-center justify-center p-6">
                  <Icon size={32} style={{ color: action.color }} className="mb-2" />
                  <span className="text-sm font-medium text-center">{action.label}</span>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Recommended Items */}
        <div>
          <h2 className="text-2xl font-bold mb-6">Barang Rekomendasi</h2>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {items.slice(0, 6).map(item => (
              <Card 
                key={item.id} 
                className={`hover:shadow-lg transition cursor-pointer ${
                  item.status === 'tidak tersedia' ? 'opacity-50' : ''
                }`} 
                onClick={() => {
                  setSelectedItem(item);
                  setCurrentPage('item-detail');
                }}
              >
                <div className="aspect-square w-full overflow-hidden rounded-t-lg">
                  <img src={item.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400'} alt={item.title} className="w-full h-full object-cover" />
                </div>
                <CardContent className="p-4">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="font-semibold text-lg flex-1">{item.title}</h3>
                    <Badge 
                      variant={item.status === 'tersedia' ? 'default' : 'secondary'}
                      className={`ml-2 ${
                        item.status === 'tersedia' 
                          ? 'bg-green-500 hover:bg-green-600' 
                          : 'bg-gray-400 hover:bg-gray-500'
                      }`}
                    >
                      {item.status === 'tersedia' ? 'Tersedia' : 'Tidak Tersedia'}
                    </Badge>
                  </div>
                  <div className="flex items-center text-sm text-gray-600 mb-2">
                    <MapPin size={16} className="mr-1" />
                    <span>{item.location}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="font-bold" style={{ color: '#245EDE' }}>
                      Rp {item.price.toLocaleString('id-ID')} / {item.priceUnit}
                    </div>
                  </div>
                  <div className="text-sm text-gray-500 mt-2">Oleh: {item.ownerName}</div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderCariBarang = () => (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        <h1 className="text-3xl font-bold mb-2">Cari Barang untuk Dipinjam</h1>
        <p className="text-gray-600 mb-6">Temukan berbagai barang yang bisa Anda pinjam dari komunitas PinjamAja</p>

        {/* Search Bar */}
        <div className="flex gap-2 mb-8">
          <Input
            placeholder="Cari barang..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="flex-1"
          />
          <Button onClick={handleSearch} style={{ backgroundColor: '#245EDE' }} className="text-white">
            <Search size={20} className="mr-2" />
            Cari
          </Button>
        </div>

        {/* Items Grid */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {getFilteredItems().map(item => (
            <Card 
              key={item.id} 
              className={`hover:shadow-lg transition cursor-pointer ${
                item.status === 'tidak tersedia' ? 'opacity-50' : ''
              }`} 
              onClick={() => {
                setSelectedItem(item);
                setCurrentPage('item-detail');
              }}
            >
              <div className="aspect-square w-full overflow-hidden rounded-t-lg">
                <img src={item.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400'} alt={item.title} className="w-full h-full object-cover" />
              </div>
              <CardContent className="p-4">
                <div className="flex justify-between items-start mb-2">
                  <h3 className="font-semibold text-lg flex-1">{item.title}</h3>
                  <Badge 
                    variant={item.status === 'tersedia' ? 'default' : 'secondary'}
                    className={`ml-2 ${
                      item.status === 'tersedia' 
                        ? 'bg-green-500 hover:bg-green-600' 
                        : 'bg-gray-400 hover:bg-gray-500'
                    }`}
                  >
                    {item.status === 'tersedia' ? 'Tersedia' : 'Tidak Tersedia'}
                  </Badge>
                </div>
                <div className="flex items-center text-sm text-gray-600 mb-2">
                  <MapPin size={16} className="mr-1" />
                  <span>{item.location}</span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="font-bold" style={{ color: '#245EDE' }}>
                    Rp {item.price.toLocaleString('id-ID')} / {item.priceUnit}
                  </div>
                </div>
                <div className="text-sm text-gray-500 mt-2">Oleh: {item.ownerName}</div>
              </CardContent>
            </Card>
          ))}
        </div>

        {getFilteredItems().length === 0 && (
          <div className="text-center py-12 text-gray-500">
            <Package size={48} className="mx-auto mb-4 opacity-50" />
            <p>Tidak ada barang ditemukan</p>
          </div>
        )}
      </div>
    </div>
  );

  const handleToggleStatus = (itemId, currentStatus) => {
    const newStatus = currentStatus === 'tersedia' ? 'tidak tersedia' : 'tersedia';
    
    const updatedItems = items.map(item => 
      item.id === itemId ? { ...item, status: newStatus } : item
    );
    setItems(updatedItems);
    localStorage.setItem('items', JSON.stringify(updatedItems));
    
    // Update selectedItem jika sedang melihat item yang diubah
    if (selectedItem && selectedItem.id === itemId) {
      setSelectedItem({ ...selectedItem, status: newStatus });
    }
    
    toast.success(`Status barang diubah menjadi ${newStatus}`);
  };

  const handleOpenEditItem = (item) => {
    setEditingItem(item);
    setItemForm({
      title: item.title,
      description: item.description,
      price: item.price.toString(),
      priceUnit: item.priceUnit,
      location: item.location,
      image: item.image || ''
    });
    setShowEditItemForm(true);
  };

  const handleEditItem = (e) => {
    e.preventDefault();
    
    if (!itemForm.title || !itemForm.description || !itemForm.price || !itemForm.location) {
      toast.error('Semua field harus diisi');
      return;
    }

    const updatedItems = items.map(item => {
      if (item.id === editingItem.id) {
        return {
          ...item,
          title: itemForm.title,
          description: itemForm.description,
          price: parseFloat(itemForm.price),
          priceUnit: itemForm.priceUnit,
          location: itemForm.location,
          image: itemForm.image
        };
      }
      return item;
    });

    setItems(updatedItems);
    localStorage.setItem('items', JSON.stringify(updatedItems));
    
    // Update selectedItem jika sedang melihat item yang diedit
    if (selectedItem && selectedItem.id === editingItem.id) {
      setSelectedItem({
        ...selectedItem,
        title: itemForm.title,
        description: itemForm.description,
        price: parseFloat(itemForm.price),
        priceUnit: itemForm.priceUnit,
        location: itemForm.location,
        image: itemForm.image
      });
    }
    
    toast.success('Barang berhasil diupdate!');
    
    // Reset form and close modal
    setItemForm({
      title: '',
      description: '',
      price: '',
      priceUnit: 'hari',
      location: '',
      image: ''
    });
    setShowEditItemForm(false);
    setEditingItem(null);
  };

  const handleOpenDeleteDialog = (item) => {
    setItemToDelete(item);
    setShowDeleteDialog(true);
  };

  const handleDeleteItem = () => {
    const updatedItems = items.filter(item => item.id !== itemToDelete.id);
    setItems(updatedItems);
    localStorage.setItem('items', JSON.stringify(updatedItems));
    
    toast.success('Barang berhasil dihapus!');
    
    setShowDeleteDialog(false);
    setItemToDelete(null);
    
    // Redirect ke halaman sewakan-barang setelah menghapus
    setCurrentPage('sewakan-barang');
  };

  const renderItemDetail = () => {
    if (!selectedItem) return null;

    // Check if item is in wishlist
    const isInWishlist = user && wishlist.some(w => w.userId === user.id && w.itemId === selectedItem.id);
    
    // Check if this is user's own item
    const isOwnItem = user && selectedItem.ownerId === user.id;

    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="container mx-auto max-w-6xl px-4">
          <Button onClick={() => setCurrentPage(previousPage || 'cari-barang')} variant="outline" className="mb-6">
            ← Kembali
          </Button>

          <Card>
            {/* Mobile Layout: Image on top, content below */}
            <div className="md:hidden">
              <div className="w-full aspect-square overflow-hidden rounded-t-lg bg-gray-100">
                <img src={selectedItem.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400'} alt={selectedItem.title} className="w-full h-full object-cover" />
              </div>
              <CardContent className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <h1 className="text-3xl font-bold flex-1">{selectedItem.title}</h1>
                  <Badge 
                    variant={selectedItem.status === 'tersedia' ? 'default' : 'secondary'}
                    className={`ml-4 ${
                      selectedItem.status === 'tersedia' 
                        ? 'bg-green-500 hover:bg-green-600' 
                        : 'bg-gray-400 hover:bg-gray-500'
                    }`}
                  >
                    {selectedItem.status === 'tersedia' ? 'Tersedia' : 'Tidak Tersedia'}
                  </Badge>
                </div>
                
                <div className="flex items-center text-gray-600 mb-4">
                  <User size={20} className="mr-2" />
                  <span>Pemilik: <strong>{selectedItem.ownerName}</strong></span>
                </div>

                <div className="flex items-center text-2xl font-bold mb-4" style={{ color: '#245EDE' }}>
                  <DollarSign size={24} className="mr-2" />
                  Rp {selectedItem.price.toLocaleString('id-ID')} / {selectedItem.priceUnit}
                </div>

                <div className="mb-6">
                  <h2 className="font-semibold text-lg mb-2">Deskripsi</h2>
                  <p className="text-gray-700">{selectedItem.description}</p>
                </div>

                <div className="flex items-center text-gray-600 mb-6">
                  <MapPin size={20} className="mr-2" />
                  <span>{selectedItem.location}</span>
                </div>

                {isOwnItem ? (
                  <div>
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                      <p className="text-blue-800 font-medium">Ini adalah barang Anda sendiri</p>
                    </div>
                    <div className="space-y-2">
                      <Button 
                        className="w-full"
                        style={{ backgroundColor: '#245EDE', color: 'white' }}
                        onClick={() => setOpenMenuItemId(openMenuItemId === 'detail-view' ? null : 'detail-view')}
                      >
                        Kelola Barang
                      </Button>
                      
                      {openMenuItemId === 'detail-view' && (
                        <div className="space-y-2 pt-2">
                          <Button 
                            onClick={() => {
                              handleToggleStatus(selectedItem.id, selectedItem.status);
                              setOpenMenuItemId(null);
                            }}
                            variant="outline"
                            className="w-full"
                          >
                            {selectedItem.status === 'tersedia' ? 'Tandai Tidak Tersedia' : 'Tandai Tersedia'}
                          </Button>
                          
                          <Button 
                            onClick={() => {
                              handleOpenEditItem(selectedItem);
                              setOpenMenuItemId(null);
                            }}
                            variant="outline"
                            className="w-full"
                          >
                            <Edit size={16} className="mr-2" />
                            Edit Barang
                          </Button>
                          
                          <Button 
                            onClick={() => {
                              handleOpenDeleteDialog(selectedItem);
                              setOpenMenuItemId(null);
                            }}
                            className="w-full bg-red-500 hover:bg-red-600 text-white"
                          >
                            <Trash2 size={16} className="mr-2" />
                            Hapus Barang
                          </Button>
                        </div>
                      )}
                    </div>
                  </div>
                ) : (
                  <div className="flex flex-col sm:flex-row gap-3">
                    <Button onClick={() => handleStartChat(selectedItem)} style={{ backgroundColor: '#245EDE' }} className="text-white flex-1">
                      <MessageSquare size={20} className="mr-2" />
                      Chat untuk Pinjam
                    </Button>
                    {isInWishlist ? (
                      <Button 
                        onClick={() => handleRemoveFromWishlist(selectedItem.id)} 
                        className="flex-1 bg-red-500 hover:bg-red-600 text-white border-red-500"
                      >
                        <Heart size={20} className="mr-2 fill-current" />
                        Hapus dari Wishlist
                      </Button>
                    ) : (
                      <Button onClick={() => handleAddToWishlist(selectedItem.id)} variant="outline" className="flex-1">
                        <Heart size={20} className="mr-2" />
                        Tambah ke Wishlist
                      </Button>
                    )}
                  </div>
                )}
              </CardContent>
            </div>

            {/* Desktop/Tablet Layout: Image on left (50%), content on right (50%) */}
            <div className="hidden md:flex">
              <div className="w-1/2 aspect-square overflow-hidden rounded-l-lg flex items-center justify-center bg-gray-100">
                <img 
                  src={selectedItem.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400'} 
                  alt={selectedItem.title} 
                  className="w-full h-full object-cover" 
                />
              </div>
              <CardContent className="w-1/2 p-6">
                <div className="flex items-start justify-between mb-4">
                  <h1 className="text-3xl font-bold flex-1">{selectedItem.title}</h1>
                  <Badge 
                    variant={selectedItem.status === 'tersedia' ? 'default' : 'secondary'}
                    className={`ml-4 ${
                      selectedItem.status === 'tersedia' 
                        ? 'bg-green-500 hover:bg-green-600' 
                        : 'bg-gray-400 hover:bg-gray-500'
                    }`}
                  >
                    {selectedItem.status === 'tersedia' ? 'Tersedia' : 'Tidak Tersedia'}
                  </Badge>
                </div>
                
                <div className="flex items-center text-gray-600 mb-4">
                  <User size={20} className="mr-2" />
                  <span>Pemilik: <strong>{selectedItem.ownerName}</strong></span>
                </div>

                <div className="flex items-center text-2xl font-bold mb-4" style={{ color: '#245EDE' }}>
                  <DollarSign size={24} className="mr-2" />
                  Rp {selectedItem.price.toLocaleString('id-ID')} / {selectedItem.priceUnit}
                </div>

                <div className="mb-6">
                  <h2 className="font-semibold text-lg mb-2">Deskripsi</h2>
                  <p className="text-gray-700">{selectedItem.description}</p>
                </div>

                <div className="flex items-center text-gray-600 mb-6">
                  <MapPin size={20} className="mr-2" />
                  <span>{selectedItem.location}</span>
                </div>

                {isOwnItem ? (
                  <div>
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                      <p className="text-blue-800 font-medium">Ini adalah barang Anda sendiri</p>
                    </div>
                    <div className="space-y-2">
                      <Button 
                        className="w-full"
                        style={{ backgroundColor: '#245EDE', color: 'white' }}
                        onClick={() => setOpenMenuItemId(openMenuItemId === 'detail-view' ? null : 'detail-view')}
                      >
                        Kelola Barang
                      </Button>
                      
                      {openMenuItemId === 'detail-view' && (
                        <div className="space-y-2 pt-2">
                          <Button 
                            onClick={() => {
                              handleToggleStatus(selectedItem.id, selectedItem.status);
                              setOpenMenuItemId(null);
                            }}
                            variant="outline"
                            className="w-full"
                          >
                            {selectedItem.status === 'tersedia' ? 'Tandai Tidak Tersedia' : 'Tandai Tersedia'}
                          </Button>
                          
                          <Button 
                            onClick={() => {
                              handleOpenEditItem(selectedItem);
                              setOpenMenuItemId(null);
                            }}
                            variant="outline"
                            className="w-full"
                          >
                            <Edit size={16} className="mr-2" />
                            Edit Barang
                          </Button>
                          
                          <Button 
                            onClick={() => {
                              handleOpenDeleteDialog(selectedItem);
                              setOpenMenuItemId(null);
                            }}
                            className="w-full bg-red-500 hover:bg-red-600 text-white"
                          >
                            <Trash2 size={16} className="mr-2" />
                            Hapus Barang
                          </Button>
                        </div>
                      )}
                    </div>
                  </div>
                ) : (
                  <div className="flex flex-col sm:flex-row gap-3">
                    <Button onClick={() => handleStartChat(selectedItem)} style={{ backgroundColor: '#245EDE' }} className="text-white flex-1">
                      <MessageSquare size={20} className="mr-2" />
                      Chat untuk Pinjam
                    </Button>
                    {isInWishlist ? (
                      <Button 
                        onClick={() => handleRemoveFromWishlist(selectedItem.id)} 
                        className="flex-1 bg-red-500 hover:bg-red-600 text-white border-red-500"
                      >
                        <Heart size={20} className="mr-2 fill-current" />
                        Hapus dari Wishlist
                      </Button>
                    ) : (
                      <Button onClick={() => handleAddToWishlist(selectedItem.id)} variant="outline" className="flex-1">
                        <Heart size={20} className="mr-2" />
                        Tambah ke Wishlist
                      </Button>
                    )}
                  </div>
                )}
              </CardContent>
            </div>
          </Card>
        </div>
      </div>
    );
  };

  const renderSewakanBarang = () => {
    const userItems = getUserItems();

    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-2">Sewakan Barang</h1>
            <p className="text-gray-600">Kelola barang yang Anda sewakan</p>
          </div>

          {/* Daftar Barang yang Sudah Diupload */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold">Barang Anda ({userItems.length})</h2>
              <Button 
                onClick={() => setShowAddItemForm(true)} 
                style={{ backgroundColor: '#245EDE' }} 
                className="text-white"
              >
                Tambahkan Barang
              </Button>
            </div>
            
            {userItems.length > 0 ? (
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {userItems.map(item => (
                  <Card 
                    key={item.id} 
                    className={`hover:shadow-lg transition ${item.status === 'tidak tersedia' ? 'opacity-50' : ''}`}
                  >
                    <div 
                      className="aspect-square w-full overflow-hidden rounded-t-lg cursor-pointer" 
                      onClick={() => {
                        setSelectedItem(item);
                        navigateTo('item-detail');
                      }}
                    >
                      <img src={item.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400'} alt={item.title} className="w-full h-full object-cover" />
                    </div>
                    <CardContent className="p-4">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-semibold text-lg line-clamp-1 flex-1">{item.title}</h3>
                        <Badge 
                          variant={item.status === 'tersedia' ? 'default' : 'secondary'}
                          className={`ml-2 ${
                            item.status === 'tersedia' 
                              ? 'bg-green-500 hover:bg-green-600' 
                              : 'bg-gray-400 hover:bg-gray-500'
                          }`}
                        >
                          {item.status === 'tersedia' ? 'Tersedia' : 'Tidak Tersedia'}
                        </Badge>
                      </div>
                      <div className="flex items-center text-sm text-gray-600 mb-2">
                        <MapPin size={16} className="mr-1" />
                        <span>{item.location}</span>
                      </div>
                      <div className="font-bold mb-3" style={{ color: '#245EDE' }}>
                        Rp {item.price.toLocaleString('id-ID')} / {item.priceUnit}
                      </div>
                      
                      {/* Action Buttons */}
                      <div className="space-y-2">
                        <Button 
                          className="w-full"
                          style={{ backgroundColor: '#245EDE', color: 'white' }}
                          onClick={(e) => {
                            e.stopPropagation();
                            setOpenMenuItemId(openMenuItemId === item.id ? null : item.id);
                          }}
                        >
                          Kelola Barang
                        </Button>
                        
                        {openMenuItemId === item.id && (
                          <div className="space-y-2 pt-2">
                            <Button 
                              onClick={(e) => {
                                e.stopPropagation();
                                handleToggleStatus(item.id, item.status);
                                setOpenMenuItemId(null);
                              }}
                              variant="outline"
                              className="w-full"
                            >
                              {item.status === 'tersedia' ? 'Tandai Tidak Tersedia' : 'Tandai Tersedia'}
                            </Button>
                            
                            <Button 
                              onClick={(e) => {
                                e.stopPropagation();
                                handleOpenEditItem(item);
                                setOpenMenuItemId(null);
                              }}
                              variant="outline"
                              className="w-full"
                            >
                              <Edit size={16} className="mr-2" />
                              Edit Barang
                            </Button>
                            
                            <Button 
                              onClick={(e) => {
                                e.stopPropagation();
                                handleOpenDeleteDialog(item);
                                setOpenMenuItemId(null);
                              }}
                              className="w-full bg-red-500 hover:bg-red-600 text-white"
                            >
                              <Trash2 size={16} className="mr-2" />
                              Hapus Barang
                            </Button>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <Card>
                <CardContent className="text-center py-12">
                  <Package size={48} className="mx-auto mb-4 opacity-50 text-gray-400" />
                  <p className="text-gray-500 text-lg mb-2">Belum ada barang yang disewakan</p>
                  <p className="text-gray-400 text-sm">Klik tombol "Tambahkan Barang" untuk mulai menambahkan barang</p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderChat = () => {
    const userChats = getUserChats();

    if (selectedChat) {
      const otherUserId = selectedChat.participants.find(id => id !== user?.id);
      const otherUserName = selectedChat.participantNames[otherUserId];
      
      // Get item data for product card
      const chatItem = items.find(item => item.id === selectedChat.itemId);

      return (
        <div className="fixed inset-0 bg-gray-50 flex flex-col z-50">
          {/* Chat Header with Product Card - Fixed at top */}
          <div className="bg-white shadow-md py-3 flex-shrink-0 border-b z-10">
            <div className="container mx-auto px-4">
              <div className="flex items-start gap-3 mb-3">
                <Button 
                  onClick={() => {
                    setSelectedChat(null);
                    setCurrentPage(previousPage);
                  }} 
                  variant="ghost" 
                  size="icon"
                  className="flex-shrink-0 mt-1"
                  style={{ fontSize: '24px' }}
                >
                  ←
                </Button>
                <div className="flex-1 min-w-0">
                  <h2 className="font-bold text-xl truncate" style={{ color: '#245EDE' }}>
                    {otherUserName}
                  </h2>
                  {chatItem && (
                    <p className="text-sm text-gray-600 truncate">Barang: {chatItem.title}</p>
                  )}
                </div>
              </div>
              
              {/* Product Card */}
              {chatItem && (
                <div 
                  onClick={() => {
                    setSelectedItem(chatItem);
                    navigateTo('item-detail');
                  }}
                  className="flex items-center gap-3 p-2.5 bg-gray-50 rounded-lg border border-gray-200 hover:bg-gray-100 cursor-pointer transition"
                >
                  <div className="w-14 h-14 flex-shrink-0 rounded-md overflow-hidden">
                    <img 
                      src={chatItem.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400'} 
                      alt={chatItem.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 className="font-semibold text-sm truncate">{chatItem.title}</h3>
                    <p className="text-xs text-gray-500 flex items-center mt-0.5">
                      <MapPin size={11} className="mr-1 flex-shrink-0" />
                      <span className="truncate">{chatItem.location}</span>
                    </p>
                  </div>
                  <div className="text-right flex-shrink-0">
                    <p className="text-sm font-bold whitespace-nowrap" style={{ color: '#245EDE' }}>
                      Rp {chatItem.price.toLocaleString('id-ID')}
                    </p>
                    <p className="text-xs text-gray-400">/ {chatItem.priceUnit}</p>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Messages - Scrollable area */}
          <div className="flex-1 overflow-y-auto">
            <div className="container mx-auto px-4 py-3 space-y-3">
              {selectedChat.messages.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  <MessageSquare size={40} className="mx-auto mb-3 opacity-50" />
                  <p className="text-sm">Belum ada pesan. Mulai percakapan!</p>
                </div>
              ) : (
                selectedChat.messages.map(message => (
                  <div key={message.id} className={`flex ${message.senderId === user?.id ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-xs md:max-w-md px-4 py-3 rounded-lg shadow-sm ${message.senderId === user?.id ? 'text-white' : 'bg-white border border-gray-200'}`}
                      style={message.senderId === user?.id ? { backgroundColor: '#245EDE' } : {}}>
                      <p className="text-base leading-relaxed">{message.text}</p>
                      <p className={`text-xs mt-1.5 ${message.senderId === user?.id ? 'text-blue-100' : 'text-gray-500'}`}>
                        {new Date(message.timestamp).toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}
                      </p>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Message Input - Fixed at bottom */}
          <div className="bg-white border-t py-3 flex-shrink-0">
            <div className="container mx-auto px-4">
              <form onSubmit={handleSendMessage} className="flex gap-2">
                <Input
                  value={chatMessage}
                  onChange={(e) => setChatMessage(e.target.value)}
                  placeholder="Ketik pesan..."
                  className="flex-1"
                />
                <Button type="submit" style={{ backgroundColor: '#245EDE' }} className="text-white">
                  <Send size={20} />
                </Button>
              </form>
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          <div className="flex items-center gap-4 mb-6">
            <h1 className="text-3xl font-bold">Chat</h1>
          </div>

          {userChats.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <MessageSquare size={48} className="mx-auto mb-4 opacity-50 text-gray-400" />
                <p className="text-gray-500 mb-4">Belum ada percakapan</p>
                <p className="text-sm text-gray-400">Mulai chat dengan pemilik barang dari halaman detail barang</p>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-2">
              {userChats.map(chat => {
                const otherUserId = chat.participants.find(id => id !== user?.id);
                const otherUserName = chat.participantNames[otherUserId];
                
                // Get item for this chat
                const chatItem = items.find(item => item.id === chat.itemId);

                return (
                  <Card key={chat.id} className="cursor-pointer hover:shadow-md transition" onClick={() => setSelectedChat(chat)}>
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className="w-16 h-16 rounded-md overflow-hidden flex-shrink-0">
                        <img
                          src={chatItem?.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400'}
                          alt={chatItem?.title || 'Barang'}
                          className="w-full h-full object-cover"
                        />
                      </div>

                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="font-semibold">{otherUserName}</h3>
                          <span className="text-xs text-gray-400">•</span>
                          <span className="text-xs text-gray-500">Pemilik</span>
                        </div>
                        <p className="text-sm font-medium text-gray-700 mb-1">{chat.itemTitle}</p>
                        <p className="text-sm text-gray-500">{chat.lastMessage || 'Belum ada pesan'}</p>
                      </div>

                    <div className="text-xs text-gray-400 whitespace-nowrap ml-2">
                      {new Date(chat.lastUpdated).toLocaleTimeString('id-ID', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                    </div>
                  </CardContent>

                  </Card>
                );
              })}
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderWishlist = () => {
    const wishlistItems = getUserWishlistItems();

    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          <h1 className="text-3xl font-bold mb-6">Wishlist Saya</h1>

          {wishlistItems.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <Heart size={48} className="mx-auto mb-4 opacity-50 text-gray-400" />
                <p className="text-gray-500 mb-4">Wishlist Anda masih kosong</p>
                <p className="text-sm text-gray-400">Tambahkan barang favorit Anda dari halaman pencarian</p>
              </CardContent>
            </Card>
          ) : (
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {wishlistItems.map(item => (
                <Card key={item.id} className="hover:shadow-lg transition">
                  <div className="aspect-square w-full overflow-hidden rounded-t-lg cursor-pointer" onClick={() => {
                    setSelectedItem(item);
                    setCurrentPage('item-detail');
                  }}>
                    <img src={item.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400'} alt={item.title} className="w-full h-full object-cover" />
                  </div>
                  <CardContent className="p-4">
                    <h3 className="font-semibold text-lg mb-2">{item.title}</h3>
                    <div className="flex items-center text-sm text-gray-600 mb-2">
                      <MapPin size={16} className="mr-1" />
                      <span>{item.location}</span>
                    </div>
                    <div className="flex items-center justify-between mb-4">
                      <div className="font-bold" style={{ color: '#245EDE' }}>
                        Rp {item.price.toLocaleString('id-ID')} / {item.priceUnit}
                      </div>
                    </div>
                    <div className="text-sm text-gray-500 mb-4">Oleh: {item.ownerName}</div>
                    <Button onClick={() => handleRemoveFromWishlist(item.id)} variant="outline" className="w-full">
                      <Trash2 size={16} className="mr-2" />
                      Hapus dari Wishlist
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderProfil = () => (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto max-w-2xl px-4">
        <h1 className="text-3xl font-bold mb-6">Profil Saya</h1>

        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="flex items-center justify-center mb-6">
              <div className="w-24 h-24 rounded-full flex items-center justify-center text-white text-3xl font-bold" style={{ backgroundColor: '#245EDE' }}>
                {user?.username?.charAt(0).toUpperCase()}
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">Username</label>
                <p className="text-lg font-semibold">{user?.username}</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">Email</label>
                <p className="text-lg">{user?.email}</p>
              </div>

              <div 
                onClick={() => setCurrentPage('sewakan-barang')}
                className="cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors"
              >
                <label className="block text-sm font-medium text-gray-600 mb-1 cursor-pointer">Jumlah Barang Disewakan</label>
                <p className="text-lg font-semibold cursor-pointer" style={{ color: '#245EDE' }}>{getUserItemCount()} Barang</p>
              </div>
            </div>

            <div className="space-y-3 mt-6">
              <Button onClick={() => setShowEditProfile(true)} variant="outline" className="w-full">
                <Edit size={16} className="mr-2" />
                Edit Profil
              </Button>
              <Button onClick={() => setShowEditPassword(true)} variant="outline" className="w-full">
                <Edit size={16} className="mr-2" />
                Edit Password
              </Button>
              <Button onClick={handleLogout} variant="outline" className="w-full text-red-600 border-red-600 hover:bg-red-50">
                <LogOut size={16} className="mr-2" />
                Logout
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Informasi Tambahan */}
        <Card>
          <CardHeader>
            <CardTitle>Informasi</CardTitle>
          </CardHeader>
          <CardContent>
            <Accordion type="single" collapsible className="w-full">
              <AccordionItem value="cara-menggunakan" data-testid="cara-menggunakan-accordion">
                <AccordionTrigger className="text-left hover:no-underline">
                  <span className="font-semibold">Cara Menggunakan</span>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="text-gray-700 space-y-2 pt-2">
                    <p>1. Daftar akun gratis</p>
                    <p>2. Cari barang yang Anda butuhkan atau upload barang untuk disewakan</p>
                    <p>3. Chat dengan pemilik/peminjam untuk koordinasi</p>
                    <p>4. Atur waktu dan tempat pertemuan</p>
                    <p>5. Lakukan transaksi dengan aman</p>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="faq" data-testid="faq-accordion">
                <AccordionTrigger className="text-left hover:no-underline">
                  <span className="font-semibold">FAQ</span>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="text-gray-700 space-y-4 pt-2">
                    <div>
                      <p className="font-semibold">Q: Apakah PinjamAja gratis?</p>
                      <p>A: Ya, mendaftar dan menggunakan platform kami sepenuhnya gratis.</p>
                    </div>
                    <div>
                      <p className="font-semibold">Q: Bagaimana cara pembayaran?</p>
                      <p>A: Pembayaran dilakukan langsung antara peminjam dan pemilik barang saat bertemu.</p>
                    </div>
                    <div>
                      <p className="font-semibold">Q: Apakah ada jaminan keamanan?</p>
                      <p>A: Kami menyarankan bertemu di tempat umum dan memeriksa identitas kedua belah pihak.</p>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="kebijakan-privasi" data-testid="kebijakan-privasi-accordion">
                <AccordionTrigger className="text-left hover:no-underline">
                  <span className="font-semibold">Kebijakan Privasi</span>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="text-gray-700 pt-2">
                    <p>Kami sangat menghargai privasi Anda. Data pribadi Anda disimpan dengan aman dan tidak akan dibagikan kepada pihak ketiga tanpa izin Anda. Kami hanya menggunakan informasi Anda untuk meningkatkan layanan platform.</p>
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="syarat-ketentuan" data-testid="syarat-ketentuan-accordion">
                <AccordionTrigger className="text-left hover:no-underline">
                  <span className="font-semibold">Syarat & Ketentuan</span>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="text-gray-700 space-y-2 pt-2">
                    <p>1. Pengguna harus berusia minimal 17 tahun</p>
                    <p>2. Informasi yang diberikan harus akurat dan benar</p>
                    <p>3. Dilarang menyewakan barang ilegal atau berbahaya</p>
                    <p>4. Transaksi dilakukan atas tanggung jawab masing-masing pihak</p>
                    <p>5. PinjamAja tidak bertanggung jawab atas kerugian dalam transaksi</p>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen">
      {renderNavbar()}

      {currentPage === 'landing' && renderLandingPage()}
      {currentPage === 'beranda' && renderBeranda()}
      {currentPage === 'cari-barang' && renderCariBarang()}
      {currentPage === 'item-detail' && renderItemDetail()}
      {currentPage === 'sewakan-barang' && renderSewakanBarang()}
      {currentPage === 'chat' && renderChat()}
      {currentPage === 'wishlist' && renderWishlist()}
      {currentPage === 'profil' && renderProfil()}

      {/* Auth Modal */}
      {showAuthModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>{authMode === 'login' ? 'Masuk' : 'Daftar'}</CardTitle>
                <button onClick={() => {
                  setShowAuthModal(false);
                  setAuthForm({ email: '', username: '', password: '', confirmPassword: '' });
                }}>
                  <X size={24} />
                </button>
              </div>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleAuth} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Email</label>
                  <Input
                    type="email"
                    value={authForm.email}
                    onChange={(e) => setAuthForm({ ...authForm, email: e.target.value })}
                    required
                  />
                </div>

                {authMode === 'register' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">Username</label>
                    <Input
                      value={authForm.username}
                      onChange={(e) => setAuthForm({ ...authForm, username: e.target.value })}
                      required
                    />
                  </div>
                )}

                <div>
                  <label className="block text-sm font-medium mb-2">Password</label>
                  <Input
                    type="password"
                    value={authForm.password}
                    onChange={(e) => setAuthForm({ ...authForm, password: e.target.value })}
                    required
                  />
                </div>

                {authMode === 'register' && (
                  <div>
                    <label className="block text-sm font-medium mb-2">Konfirmasi Password</label>
                    <Input
                      type="password"
                      value={authForm.confirmPassword}
                      onChange={(e) => setAuthForm({ ...authForm, confirmPassword: e.target.value })}
                      required
                    />
                  </div>
                )}

                <div className="pt-2">
                  <Button type="submit" style={{ backgroundColor: '#245EDE' }} className="text-white w-full">
                    {authMode === 'login' ? 'Masuk' : 'Daftar'}
                  </Button>
                </div>

                <div className="text-center text-sm pt-1">
                  {authMode === 'login' ? (
                    <p>
                      Belum punya akun?{' '}
                      <button type="button" onClick={() => setAuthMode('register')} style={{ color: '#245EDE' }} className="font-semibold">
                        Daftar sekarang
                      </button>
                    </p>
                  ) : (
                    <p>
                      Sudah punya akun?{' '}
                      <button type="button" onClick={() => setAuthMode('login')} style={{ color: '#245EDE' }} className="font-semibold">
                        Masuk
                      </button>
                    </p>
                  )}
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Feature Modal */}
      {showFeatureModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>{featureModalContent.title}</CardTitle>
                <button onClick={() => setShowFeatureModal(false)}>
                  <X size={24} />
                </button>
              </div>
            </CardHeader>
            <CardContent>
              <p className="whitespace-pre-line text-gray-700">{featureModalContent.description}</p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Edit Profile Modal */}
      {showEditProfile && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Edit Profil</CardTitle>
                <button onClick={() => setShowEditProfile(false)}>
                  <X size={24} />
                </button>
              </div>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleUpdateProfile} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Username</label>
                  <Input
                    value={profileForm.username}
                    onChange={(e) => setProfileForm({ username: e.target.value })}
                    required
                  />
                </div>
                <Button type="submit" style={{ backgroundColor: '#245EDE' }} className="text-white w-full">
                  Simpan Perubahan
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Edit Password Modal */}
      {showEditPassword && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Edit Password</CardTitle>
                <button onClick={() => setShowEditPassword(false)}>
                  <X size={24} />
                </button>
              </div>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleUpdatePassword} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Password Lama</label>
                  <Input
                    type="password"
                    value={passwordForm.currentPassword}
                    onChange={(e) => setPasswordForm({ ...passwordForm, currentPassword: e.target.value })}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">Password Baru</label>
                  <Input
                    type="password"
                    value={passwordForm.newPassword}
                    onChange={(e) => setPasswordForm({ ...passwordForm, newPassword: e.target.value })}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">Konfirmasi Password Baru</label>
                  <Input
                    type="password"
                    value={passwordForm.confirmPassword}
                    onChange={(e) => setPasswordForm({ ...passwordForm, confirmPassword: e.target.value })}
                    required
                  />
                </div>
                <Button type="submit" style={{ backgroundColor: '#245EDE' }} className="text-white w-full">
                  Ubah Password
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Add Item Modal */}
      {showAddItemForm && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 transition-opacity duration-300 ease-in-out"
          onClick={() => setShowAddItemForm(false)}
        >
          <Card 
            className="w-full max-w-2xl max-h-[90vh] overflow-y-auto transition-all duration-300 ease-in-out transform"
            onClick={(e) => e.stopPropagation()}
          >
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Tambah Barang Baru</CardTitle>
                <button onClick={() => setShowAddItemForm(false)}>
                  <X size={24} />
                </button>
              </div>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleAddItem} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium mb-2">Foto Barang</label>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                    {itemForm.image ? (
                      <div className="relative">
                        <img src={itemForm.image} alt="Preview" className="max-h-64 mx-auto rounded" />
                        <Button type="button" onClick={() => setItemForm({ ...itemForm, image: '' })} variant="outline" className="mt-4">
                          Ganti Foto
                        </Button>
                      </div>
                    ) : (
                      <div>
                        <Camera size={48} className="mx-auto mb-4 text-gray-400" />
                        <Input
                          type="file"
                          accept="image/*"
                          onChange={handleImageUpload}
                          className="max-w-xs mx-auto"
                        />
                      </div>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Judul Barang *</label>
                  <Input
                    value={itemForm.title}
                    onChange={(e) => setItemForm({ ...itemForm, title: e.target.value })}
                    placeholder="Contoh: Kamera DSLR Canon EOS 80D"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Deskripsi *</label>
                  <Textarea
                    value={itemForm.description}
                    onChange={(e) => setItemForm({ ...itemForm, description: e.target.value })}
                    placeholder="Jelaskan kondisi dan spesifikasi barang Anda"
                    rows={4}
                    required
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Harga Sewa (Rp) *</label>
                    <Input
                      type="number"
                      value={itemForm.price}
                      onChange={(e) => setItemForm({ ...itemForm, price: e.target.value })}
                      placeholder="50000"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Per *</label>
                    <select
                      value={itemForm.priceUnit}
                      onChange={(e) => setItemForm({ ...itemForm, priceUnit: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    >
                      <option value="menit">Menit</option>
                      <option value="jam">Jam</option>
                      <option value="hari">Hari</option>
                      <option value="minggu">Minggu</option>
                      <option value="bulan">Bulan</option>
                      <option value="tahun">Tahun</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Lokasi *</label>
                  <Input
                    value={itemForm.location}
                    onChange={(e) => setItemForm({ ...itemForm, location: e.target.value })}
                    placeholder="Contoh: Jakarta Selatan"
                    required
                  />
                </div>

                <div className="flex gap-4 pt-4">
                  <Button type="button" variant="outline" className="flex-1" onClick={handleCancelAddItem}>
                    Batal
                  </Button>
                  <Button type="submit" style={{ backgroundColor: '#245EDE' }} className="text-white flex-1">
                    Upload Barang
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Edit Item Modal */}
      {showEditItemForm && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 transition-opacity duration-300 ease-in-out"
          onClick={() => {
            setShowEditItemForm(false);
            setEditingItem(null);
          }}
        >
          <Card 
            className="w-full max-w-2xl max-h-[90vh] overflow-y-auto transition-all duration-300 ease-in-out transform"
            onClick={(e) => e.stopPropagation()}
          >
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Edit Barang</CardTitle>
                <button onClick={() => {
                  setShowEditItemForm(false);
                  setEditingItem(null);
                }}>
                  <X size={24} />
                </button>
              </div>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleEditItem} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium mb-2">Foto Barang</label>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                    {itemForm.image ? (
                      <div className="relative">
                        <img src={itemForm.image} alt="Preview" className="max-h-64 mx-auto rounded" />
                        <Button type="button" onClick={() => setItemForm({ ...itemForm, image: '' })} variant="outline" className="mt-4">
                          Ganti Foto
                        </Button>
                      </div>
                    ) : (
                      <div>
                        <Camera size={48} className="mx-auto mb-4 text-gray-400" />
                        <Input
                          type="file"
                          accept="image/*"
                          onChange={handleImageUpload}
                          className="max-w-xs mx-auto"
                        />
                      </div>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Judul Barang *</label>
                  <Input
                    value={itemForm.title}
                    onChange={(e) => setItemForm({ ...itemForm, title: e.target.value })}
                    placeholder="Contoh: Kamera DSLR Canon EOS 80D"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Deskripsi *</label>
                  <Textarea
                    value={itemForm.description}
                    onChange={(e) => setItemForm({ ...itemForm, description: e.target.value })}
                    placeholder="Jelaskan kondisi dan spesifikasi barang Anda"
                    rows={4}
                    required
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Harga Sewa (Rp) *</label>
                    <Input
                      type="number"
                      value={itemForm.price}
                      onChange={(e) => setItemForm({ ...itemForm, price: e.target.value })}
                      placeholder="50000"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">Per *</label>
                    <select
                      value={itemForm.priceUnit}
                      onChange={(e) => setItemForm({ ...itemForm, priceUnit: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    >
                      <option value="menit">Menit</option>
                      <option value="jam">Jam</option>
                      <option value="hari">Hari</option>
                      <option value="minggu">Minggu</option>
                      <option value="bulan">Bulan</option>
                      <option value="tahun">Tahun</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Lokasi *</label>
                  <Input
                    value={itemForm.location}
                    onChange={(e) => setItemForm({ ...itemForm, location: e.target.value })}
                    placeholder="Contoh: Jakarta Selatan"
                    required
                  />
                </div>

                <div className="flex gap-4 pt-4">
                  <Button type="button" variant="outline" className="flex-1" onClick={() => {
                    setShowEditItemForm(false);
                    setEditingItem(null);
                  }}>
                    Batal
                  </Button>
                  <Button type="submit" style={{ backgroundColor: '#245EDE' }} className="text-white flex-1">
                    Simpan Perubahan
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Apakah Anda yakin?</AlertDialogTitle>
            <AlertDialogDescription>
              Tindakan ini tidak dapat dibatalkan. Barang "{itemToDelete?.title}" akan dihapus secara permanen.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Batal</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleDeleteItem} 
              style={{ backgroundColor: '#dc2626' }}
              className="hover:bg-red-700"
            >
              Hapus
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Toast Notifications */}
      <Toaster position="top-center" richColors theme="light" />
    </div>
  );
}